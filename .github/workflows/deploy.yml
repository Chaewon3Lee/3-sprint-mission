name: discodeit CI/CD Workflow

on:
  push:
    branches:
      - release

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      PUBLIC_ECR_ALIAS: ${{ vars.ECR_ALIAS }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

    steps:
      # 1단계: 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2단계: AWS CLI 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3단계: AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4단계: Amazon ECR에 로그인
      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin public.ecr.aws/$PUBLIC_ECR_ALIAS

      # 5단계: Docker 이미지 빌드 및 ECR에 업로드
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws/${{ env.PUBLIC_ECR_ALIAS }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 6단계: 태스크 정의 파일에서 컨테이너 이미지 정보를 새 이미지로 업데이트
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: discodeit-container
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}

      # 7단계: 업데이트된 태스크 정의로 ECS 서비스 배포 실행
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true